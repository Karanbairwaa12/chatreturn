[{"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/index.js":"1","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/App.js":"2","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/reportWebVitals.js":"3","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/pages/Home.jsx":"4","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/pages/Authentication.jsx":"5","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/register/Register.jsx":"6","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/login/Login.jsx":"7","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/chatpage/ChatPage.jsx":"8","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/mychat/MyChat.jsx":"9","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/BinaryImage.jsx":"10","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/index.js":"11","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/App.js":"12","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/reportWebVitals.js":"13","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/pages/Authentication.jsx":"14","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/pages/Home.jsx":"15","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/login/Login.jsx":"16","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/register/Register.jsx":"17","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/chatpage/ChatPage.jsx":"18","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/BinaryImage.jsx":"19","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/mychat/MyChat.jsx":"20","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/groupChat/GrpChat.jsx":"21"},{"size":535,"mtime":1694426251239,"results":"22","hashOfConfig":"23"},{"size":2384,"mtime":1695992164161,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1694426251240,"results":"25","hashOfConfig":"23"},{"size":456,"mtime":1694682013270,"results":"26","hashOfConfig":"23"},{"size":1269,"mtime":1694687928085,"results":"27","hashOfConfig":"23"},{"size":4975,"mtime":1695991953699,"results":"28","hashOfConfig":"23"},{"size":3724,"mtime":1695991975298,"results":"29","hashOfConfig":"23"},{"size":15834,"mtime":1695991874735,"results":"30","hashOfConfig":"23"},{"size":7764,"mtime":1695991917472,"results":"31","hashOfConfig":"23"},{"size":741,"mtime":1695987904432,"results":"32","hashOfConfig":"23"},{"size":535,"mtime":1695992427000,"results":"33","hashOfConfig":"34"},{"size":2384,"mtime":1695992427000,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":1695992427000,"results":"36","hashOfConfig":"34"},{"size":1269,"mtime":1695992427000,"results":"37","hashOfConfig":"34"},{"size":456,"mtime":1695992427000,"results":"38","hashOfConfig":"34"},{"size":3724,"mtime":1695992427000,"results":"39","hashOfConfig":"34"},{"size":4975,"mtime":1695992427000,"results":"40","hashOfConfig":"34"},{"size":25819,"mtime":1696597165586,"results":"41","hashOfConfig":"34"},{"size":741,"mtime":1695992427000,"results":"42","hashOfConfig":"34"},{"size":7759,"mtime":1696576336749,"results":"43","hashOfConfig":"34"},{"size":7564,"mtime":1696589341804,"results":"44","hashOfConfig":"34"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"9gubgp",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iz9h20",{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/index.js",[],[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/App.js",["114","115","116","117"],[],"import {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Navigate\n} from 'react-router-dom';\nimport Home from './pages/Home';\n// import Register from './pages/Register.jsx';\nimport Authentication from './pages/Authentication';\nimport Login from './component/login/Login';\nimport Register from './component/register/Register';\nimport { useEffect, useState } from 'react';\nimport ChatPage from './component/chatpage/ChatPage';\n\n\nfunction App() {\n  const storedUserData = JSON.parse(localStorage.getItem('userData'));\n  // console.log(\"storeUserData\",storedUserData)\n  const [isLoggedIn, setIsLoggedIn] = useState(!!storedUserData);\n  const [userData, setUserData] = useState(storedUserData || {});\n  const [backendPath, setBackendPath] = useState(\"http://localhost:8081/public/\")\n\n  // Function to set the login state and store user data\n  const handleLogin = (data) => {\n    setIsLoggedIn(true);\n    setUserData(data);\n\n    // Store user data in localStorage\n    localStorage.setItem('userData', JSON.stringify(data));\n  };\n\n  // Function to set the logout state and clear user data from localStorage\n  const handleLogout = (personChat,setPersonChat) => {\n    setIsLoggedIn(false);\n    setPersonChat(false);\n\n    // Remove the personChat value from localStorage\n    localStorage.removeItem('personChat');\n    // Clear user data from localStorage\n    localStorage.removeItem('userData');  \n  };\n\n  useEffect(() => {\n    // const storedToken = localStorage.getItem('token');\n    // if (storedToken) {\n    //   setIsLoggedIn(true);\n    // }\n\n    // Retrieve user data from localStorage, if available\n    console.log(isLoggedIn)\n    const storedUserData = localStorage.getItem('userData');\n    if (storedUserData) {\n      // console.log(\"hi\",storedUserData)\n      // console.log(\"hello\",JSON.parse(storedUserData))\n      setUserData(JSON.parse(storedUserData));\n    }\n  }, []);\n  return (\n    <Router>\n      <Routes>\n        <Route\n            exact\n            path=\"/\"\n            element={<Authentication/>}\n        />\n        <Route\n          exact\n          path=\"/chat\"\n          element={isLoggedIn ? <ChatPage backendPath={backendPath} userData = {userData} handleLogout={handleLogout}/> : <Home handleLogin={handleLogin} isLoggedIn={isLoggedIn}/>}\n        />\n        <Route exact path=\"/register\" element={<Register/>} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/reportWebVitals.js",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/pages/Home.jsx",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/pages/Authentication.jsx",["118","119","120"],[],"import React, { useState } from 'react'\nimport Register from '../component/register/Register.jsx'\nimport Login from '../component/login/Login.jsx'\nimport { Link } from 'react-router-dom'\nimport WhatsAppIcon from '@mui/icons-material/WhatsApp';\nimport './auth.css'\n\nconst Authentication = () => {\n    return (\n    <>\n      <div className='whatsapp-home'>\n        <div className='home-container'>\n          <div className='home-container-box'>\n            <div className='home-container-icon'>\n              <WhatsAppIcon className='icon'/>\n            </div>\n            <div className='home-container-para'>\n              <div>\n                <h1>WhatsApp Web</h1>\n              </div>\n              <div className=\"home-whatsapp-title\">Send and receive messages without keeping your phone online.<br/>Use WhatsApp on up to 4 linked devices and 1 phone at the same time.</div>\n            </div>\n          </div>\n\n          <div className='home-btn'>\n            \n            <Link to=\"/chat\">\n              <button>Login</button>\n            </Link>\n            <Link to=\"/register\">\n              <button>Register</button>\n            </Link>\n              \n            \n          </div>\n        </div>\n      </div>\n    </>\n    \n  )\n}\n\nexport default Authentication\n","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/register/Register.jsx",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/login/Login.jsx",["121"],[],"import React, { useState } from 'react';\nimport WhatsAppIcon from '@mui/icons-material/WhatsApp';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport '../register/register.css'\nimport { Link } from 'react-router-dom';\nconst Login = ({handleLogin}) => {\n  const navigate = useNavigate()\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  const [error, setError] = useState(null); \n  const [show, setShow] = useState(false)\n  const showPassword = (e) => {\n    setShow(!show)\n  }\n  const handleChange = (e) => {\n    const { name, value} = e.target;\n    \n   \n      setFormData({\n        ...formData,\n        [name]: value,\n      });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(null); \n    console.log(formData)\n    if (!formData.email || !formData.password) {\n      setError('Please fill in all required fields.');\n      return;\n    }\n\n    try {\n      const response = await axios.post(\n        `${process.env.REACT_APP_API_BASE_URL}/user/login`,\n        formData,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n        console.log(\"response\",response)\n      if (response.status === 200 || response.status === 201) {\n        console.log('Login successful:', response.data.other);\n        console.log('Login successful:', response.data.accessToken);\n        localStorage.setItem('token', response.data.accessToken);\n        // console.log(localStorage)\n        handleLogin(response.data); \n      }else {\n        console.error('Login failed:', response.data);\n        setError(response.data.error || 'Login failed.');\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n      setError('An error occurred during login.');\n    }\n  };\n\n\n  return (\n    <div className=\"register\">\n      <div className=\"register-container\">\n        <div className='register-body'>\n          <div className=\"profile-pic\">\n            <WhatsAppIcon className='icon'/>\n          </div>\n          <div className=\"form\">\n            <h3>Login Account</h3>\n            <form onSubmit={handleSubmit}>\n              <div className=\"input-feild\">\n                <label htmlFor=\"email\">Email</label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                />\n              </div>\n              \n              <div className=\"input-feild\">\n                <label htmlFor=\"password\">Password</label>\n                <div className='passwordtype'>\n                  <input\n                    type={show ? \"text\" : \"password\"}\n                    id=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    value={formData.password}\n                    onChange={handleChange}\n                  />\n                  <button onClick={showPassword}type=\"button\">\n                    {formData.password === \"\" ? \"Show\" :show ? \"Hide\" : \"Show\"}\n                  </button>\n                </div>\n                \n              </div>\n              {error && <p className=\"error-message\">{error}</p>}\n              <div className='button'>\n                 <button button type=\"submit\">Login</button>\n              </div>\n              \n            </form>\n            <div className='loginroute'>\n              <p>Create an Account: </p>\n              <Link to=\"/register\">\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/chatpage/ChatPage.jsx",["122","123","124"],[],"import React, { useEffect, useState } from 'react'\nimport '../../pages/auth.css'\nimport './chatpage.css'\nimport WhatsAppIcon from '@mui/icons-material/WhatsApp';\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport SearchIcon from '@mui/icons-material/Search';\nimport axios from 'axios';\nimport MyChat from '../mychat/MyChat';\n\nimport io from 'socket.io-client'\nimport BinaryImage from '../BinaryImage';\n// import { set } from 'mongoose';\n\nconst socket = io.connect(\"http://localhost:9002\")\nconst ChatPage = ({userData,handleLogout,backendPath}) => {\n\n  const [dropDown, setdropDown] = useState(false)\n  const [search, setSearch] = useState(localStorage.getItem('search') || '');\n  const [searchResult,setSearchResult] = useState([])\n  const [error, setError] = useState(null); \n  const [loding, setLoding] = useState()\n  const [selectedChat, setSelectedChat] = useState([])\n  const [otherUser, setOtherUser] = useState([])\n  const [personChat, setPersonChat] = useState(\n    localStorage.getItem('personChat') === 'true' || false // Retrieve from localStorage\n  );\n  const [withoutSaerchRslt, setWithoutSearchRslt] = useState([])\n  const [newchat, setNewChat] = useState([])\n  const [profileCheck, setProfileCheck] = useState(false)\n  const [logedUserProfilecheck,setLogedUserProfilecheck] = useState(false)\n  \n  // console.log(\"first\",userData)\n  const handleProfile = () => {\n    setProfileCheck(true)\n  }\n\n  const handleLogedProfile =()=> {\n    setLogedUserProfilecheck(false)\n    setdropDown(false)\n  }\n  const handleSearchKeyPress = (e) => {\n    if (e.key === 'Enter' && search.trim() !== \"\") { // Check if search is not empty\n      handleUsers();\n      // console.log(\"search\", search);\n    }else {\n      setSearchResult([])\n    }\n  };\n  const handleUsers = async () => {\n    if (!search) {\n      // console.log(search)\n      setSearch('');\n      localStorage.removeItem('search'); // Clear search from localStorage\n      return; // Return early if search is empty\n    }\n\n    try {\n      // console.log(\"accessToken\",userData.accessToken)\n      const config = {\n          headers: {\n            Authorization :`Bearer ${userData.accessToken}`\n          }\n      }\n      setLoding(true)\n      // console.log(\"this is the data I want to fetch\")\n      const {data} = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/user?search=${search}`,config)\n      // console.log(\"data\")\n      // console.log(\"data\",data)\n      setLoding(false)\n      setSearchResult(data)\n      localStorage.setItem('search', search);\n    }catch(err) {\n      console.error('Error during login:', err);\n      setError('An error occurred during login.');\n    }\n  }\n  // console.log(\"userData\", userData)\n  \n  const joinRoom =(chat)=> {\n    // console.log(\"join room\",chat._id)\n    if(chat._id !== \"\") {\n      socket.emit(\"join_room\",chat._id)\n    }\n    \n  }\n  const accessChat = async (userId) => {\n    // console.log(\"this is userId\", userId);\n    // console.log(chats)\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${userData.accessToken}`,\n        },\n      };\n      // console.log(userData.accessToken);\n  \n      \n      const existingChat = newchat.find((chat) =>chat.users.some((user) => user._id === userId));\n      \n      // console.log(\"existingChat\", existingChat);\n      if (!existingChat) {\n        \n        const { data } = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/chat/one`, { userId }, config);\n        // console.log(\"chats data:\", data)\n       \n        setNewChat([...newchat,data])\n        \n        setSelectedChat(data);// Set the new chat as the selected chat\n        const namiUser = data.users.find(user => user._id === userId);\n\n        if (namiUser) {\n            setOtherUser(namiUser)\n            console.log(\"Nami's data:\", namiUser);\n        } else {\n            console.log(\"Nami not found in the users array.\");\n        }\n      } else {\n        \n        setSelectedChat(existingChat);\n        const namiUser = existingChat.users.find(user => user._id === userId);\n\n        if (namiUser) {\n            setOtherUser(namiUser)\n            console.log(\"Nami's data:\", namiUser);\n        } else {\n            console.log(\"Nami not found in the users array.\");\n        }\n      }\n  \n      \n      setPersonChat(true);\n  \n      \n    } catch (err) {\n      \n      setError('An error occurred');\n  \n      \n      setPersonChat(false);\n    }\n  };\n  useEffect(() => {\n    console.log(\"selected chat\", selectedChat);\n    console.log(\"ussop user\", otherUser)\n    joinRoom(selectedChat)\n  }, [selectedChat]);\n  \n  useEffect(() => {\n   handleUsers()\n  }, [search]);\n\n  useEffect(() => {\n    \n    localStorage.setItem('personChat', JSON.stringify(personChat));\n  }, [personChat]);\n\n  useEffect(() => {\n    \n    const storedPersonChat = localStorage.getItem('personChat');\n    console.log(\"storePersonChat\",storedPersonChat)\n    if (storedPersonChat) {\n      \n      setPersonChat(JSON.parse(storedPersonChat));\n    }\n  }, [personChat]);\n\n  \n  useEffect(() => {\n    if (!search) {\n      const fetchChatsWithLastMessages = async () => {\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${userData.accessToken}`,\n            },\n          };\n  \n          \n          const chatResponse = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/chat/one`, config);\n          const chatData = chatResponse.data;\n          // console.log(\"chatData from chat Response\",chatData)\n          \n          const chatsWithLastMessages = [];\n  \n          \n          for (const chat of chatData) {\n            \n            const chatMessagesUrl = `${process.env.REACT_APP_API_BASE_URL}/message/${chat._id}`;\n  \n            \n            const messageResponse = await axios.get(chatMessagesUrl, config);\n            // console.log(`this is messageResponse`,messageResponse)\n            const messageData = messageResponse.data;\n            // console.log(\"this is messageData\",messageData)\n            // console.log(\"this is messageData\",messageData)\n            \n            if (messageData.length > 0) {\n              \n              chatsWithLastMessages.push(chat);\n            }\n          }\n\n          \n          const usersNotMatchingId = chatsWithLastMessages.flatMap((chat) =>\n            chat.users.filter((user) => user._id !== userData.other._id)\n          );\n          \n          setWithoutSearchRslt(usersNotMatchingId);\n        } catch (error) {\n          console.error('Error fetching chats with last messages:', error);\n          setError('An error occurred while fetching chats.');\n        }\n      };\n  \n      \n      fetchChatsWithLastMessages();\n    }\n  }, [search, userData.accessToken, setWithoutSearchRslt]);\n  return (\n    \n    <div className='chatpage'>\n      {\n          profileCheck && (\n            <div className=\"checkUserProfile\" onClick={()=> setProfileCheck(false)}>\n              <div className='checkUserProfileContainer'>\n                <div className='checkUserProfilePic'>\n                  {/* <img src={backendPath + otherUser.pic} alt=\"\" /> */}\n                  {/* <img\n                    src={`data:${otherUser.pic.contentType};base64,${otherUser.pic.data}`}\n                    alt=\"Profile Pic\"\n                  /> */}\n\n                  <BinaryImage contentType={otherUser.pic.contentType} data={otherUser.pic.data.data} />\n                </div>\n                <div className='checkUserProfileName'>\n                  <h2>{otherUser.username}</h2>\n                </div>\n                <div className='checkUserProfileEmail'>\n                  <p>{otherUser.email}</p>\n                </div>\n              </div>\n            </div>\n          )\n        }\n\n        {\n          logedUserProfilecheck && (\n            <div className=\"checkUserProfile\" onClick={handleLogedProfile}>\n              <div className='checkUserProfileContainer'>\n                <div className='checkUserProfilePic'>\n                  {/* <img src={backendPath + userData.other.pic} alt=\"\" /> */}\n                  {/* <img\n                    src={`data:${userData.other.pic.contentType};base64,${userData.other.pic.data}`}\n                    alt=\"Profile Pic\"\n                  /> */}\n                  <BinaryImage contentType={userData.other.pic.contentType} data={userData.other.pic.data.data} />\n                </div>\n                <div className='checkUserProfileName'>\n                  <h2>{userData.other.username}</h2>\n                </div>\n                <div className='checkUserProfileEmail'>\n                  <p>{userData.other.email}</p>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      <div className='chat-container'>\n        \n        \n        <div className='chat-right'>\n          <div className='right-container'>\n            <div className='right-container-navbar'>\n              <div className='nav-container'>\n                <div className='profile'>\n                  <div className='nav-profile-pic'>\n                    {/* <img src={`${backendPath}${userData.other.pic}`} alt=\"default\" /> */}\n                    {/* {console.log(\"this is for login user\",userData.other.pic.contentType, userData.other.pic.data)} */}\n                    {/* <img\n                      src={`data:${userData.other.pic.contentType};base64,${userData.other.pic.data}`}\n                      alt=\"Profile Pic\"\n                    /> */}\n                    <BinaryImage contentType={userData.other.pic.contentType} data={userData.other.pic.data.data} />\n                  </div>\n                </div>\n                <div className='group-others'>\n                  <div className='group-icons'>\n                    <GroupsIcon className =\"grpicons\"/>\n                    <MoreVertIcon className='grpicons' onClick={()=> setdropDown(!dropDown)}/>\n                    {\n                      dropDown && (\n                        <div className='dropdown'>\n                          <div className='dropBtn' onClick={()=>setLogedUserProfilecheck(true)}>\n                            My Profile\n                          </div>\n                          <div className='dropBtn' onClick={()=>handleLogout(personChat,setPersonChat)}>\n                            Log out\n                          </div>\n                        </div>\n                      )\n                    }\n                    \n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className='right-search-box'>\n                {error && <p className=\"error-message\">{error}</p>}\n                <div className='search-container'>\n                  <SearchIcon className='search-icon'/>\n                  <input type=\"text\" value={search} onChange={(e) => setSearch(e.target.value)}\n                    onKeyPress={handleSearchKeyPress}\n                  />\n                  <button className='search-user-button' onClick={handleUsers}>Go</button>\n                </div>\n            </div>\n            <div className='right-container-user-list'>\n              <div className='list-container'>\n                    {/* {console.log(\"withoutSaerchRslt\",withoutSaerchRslt)} */}\n                  {\n                    loding ? (\n                      <div>Loding</div>\n                    ): (\n                      <div className='user-list-container'>\n                        <div className='user-list-item'>\n                          {\n                            !search ? (\n                              withoutSaerchRslt.map((item, i) => (\n                              \n                                <div className='user-item' key={i} onClick={() => accessChat(item._id)}>\n                                <div className='user-item-profile'>\n                                  <div className='item-profile-pic'>\n                                    {/* <img src={backendPath + item.pic} alt=\"default\" /> */}\n                                    {/* <img\n                                      src={`data:${item.pic.contentType};base64,${item.pic.data}`}\n                                      alt=\"Profile Pic\"\n                                    /> */}\n                                    <BinaryImage contentType={item.pic.contentType} data={item.pic.data.data} />\n                                  </div>\n                                </div>\n                                <div className='user-item-data'>\n                                  <div className='user-item-identity'>\n                                    <h3>{item.username}</h3>\n                                    \n                                  </div>\n                                  <div className='lattest-msg'>\n                                    <p>you: this is you messages</p>\n                                  </div>\n                                </div>\n                              </div>\n                              ))\n                            ):(\n                              searchResult.map((item,i)=> (\n                                <div className='user-item' key={i} onClick={() => accessChat(item._id)}>\n                                  <div className='user-item-profile'>\n                                    <div className='item-profile-pic'>\n                                      {/* <img src={`data:${item.pic.contentType};base64,${btoa(String.fromCharCode.apply(null, item.pic.data.data))}`} alt=\"Profile Pic\" /> */}\n                                      <BinaryImage contentType={item.pic.contentType} data={item.pic.data.data} i={i}/>\n                                    </div>\n                                  </div>\n                                  <div className='user-item-data'>\n                                    <div className='user-item-identity'>\n                                      <h3>{item.username}</h3>\n                                    </div>\n                                    <div className='lattest-msg'>\n                                      <p>you: this is your messages</p>\n                                    </div>\n                                  </div>\n                                </div>\n                              ))\n                            )\n\n                          }\n                        \n                          \n                        \n                        </div>\n                      </div>\n                      \n                    )\n                  }\n                  \n                  \n                \n              </div>\n            </div>\n            \n          </div>\n        </div>\n\n\n        <div className='chat-container-left'>\n          {\n            personChat ? <MyChat backendPath ={backendPath} userData={userData} selectedChat={selectedChat} setSelectedChat={setSelectedChat}  socket={socket} chatId={selectedChat._id} user={otherUser} handleProfile={handleProfile} profileCheck={profileCheck}/> :(\n              <div className='whatsapp-home'>\n                <div className='home-container'>\n                  <div className='home-container-box'>\n                    <div className='home-container-icon'>\n                      <WhatsAppIcon className='icon'/>\n                    </div>\n                    <div className='home-container-para'>\n                      <div>\n                        <h1>WhatsApp Web</h1>\n                      </div>\n                      <div className=\"home-whatsapp-title\">Send and receive messages without keeping your phone online.<br/>Use WhatsApp on up to 4 linked devices and 1 phone at the same time.</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          }\n          \n        </div>  \n      </div>      \n    </div>\n  )\n}\n\nexport default ChatPage\n","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/mychat/MyChat.jsx",["125","126","127","128","129","130","131","132"],[],"import React, { useEffect, useState,useRef } from 'react'\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport './mychat.css'\nimport axios from 'axios';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport BinaryImage from '../BinaryImage';\n\n\n\nconst MyChat = ({userData,backendPath,selectedChat, setSelectedChat,chats,setChats,user,socket, chatId,handleProfile,profileCheck}) => {\n  const [loggedUser, setLoggedUser] = useState([])\n  const [inputMsg, setInputMsg] = useState(\"\")\n  const [message, setMessage] = useState({ data: [] });\n  const [dropDown, setdropDown] = useState(false)\n  \n  const [isRemoveMessage, setIsRemovemessage] = useState(false)\n  const [index, setIndex] = useState(0)\n  // const [socketConnected, setSocketConnected] = useState(false)\n\n  \n  let selectedChatCompare\n  \n\n  const chatBodyRef = useRef();\n  // console.log(\"I dont want this\",user)\n  const myUser = user\n  // console.log(\"myUser\",myUser)\n//  console.log(\"fetche message\",message)\n// console.log(\"data:\",userData, selectedChat, chats, user,socket,chatId)\n\nconst handleSubmit = (event) =>{\n  setInputMsg(event.target.value)\n  console.log(\"handleSubmt\",message)\n\n}\n\n\nconst handleContextMenu = (e,item,i) => {\n  e.preventDefault()\n  console.log(\"this is handlecontextMenu:\",item)\n  setIsRemovemessage(true)\n  setIndex(i)\n}\n\n const fetchMessages = async() => {\n  try {\n    const config ={\n      headers: {\n        Authorization:`Bearer ${userData.accessToken}`\n      }\n    }\n\n    const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/message/${selectedChat._id}`, config);\n    const responseData = response.data;\n\n    // console.log(\"this is the message I want\", responseData);\n\n    setMessage({ data: responseData });\n    // console.log(\"responseData:\",responseData)\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nconst fetchChats = async () => {\n  console.log(\"user\",myUser)\n  try {\n    const config ={\n      headers: {\n        Authorization:`Bearer ${userData.accessToken}`\n      }\n    }\n\n    const data = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/chat/one`,config)\n    setChats(data)\n    // console.log(\"this is the chat I want\",data)\n  }catch(err) {\n    console.log(err)\n  }\n}\n\n\nconst sendMessage = async () => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\":\"application/json\",\n        Authorization:`Bearer ${userData.accessToken}`\n      }\n    }\n    setInputMsg(\"\")\n    const {data} = await axios.post(\n      `${process.env.REACT_APP_API_BASE_URL}/message`,\n      {\n        content:inputMsg,\n        chatId: selectedChat._id,\n      },\n      config\n    )\n\n    // console.log(\"this is msg\",data)\n    \n\n  \n  await socket.emit(\"new_message\",data)\n  setMessage((prevState) => {\n    return {\n      data: [...prevState.data, data],\n    };\n  });\n  \n  }catch(err) {\n    \n  }\n}\n  \nuseEffect(()=> {\n  fetchMessages()\n  // console.log(\"useEffect set message\",message)\n  \n},[selectedChat])\n\nuseEffect(() => {\n  const chatBody = document.getElementById('chat-body');\n  if (chatBody) {\n    chatBody.scrollTop = chatBody.scrollHeight;\n  }\n}, [message.data]);\n\n\n// useEffect(() => {\n//  handleRemoveMsg()\n// });\n\n\n\nuseEffect(()=> {\n  const storedUserData = localStorage.getItem('userData');\n  if (storedUserData) {\n    // console.log(\"hi\",storedUserData)\n    // console.log(\"hello\",JSON.parse(storedUserData))\n    setLoggedUser(JSON.parse(storedUserData));\n  }\n  fetchChats()\n  selectedChatCompare = selectedChat\n},[selectedChat])\n\nuseEffect(() => {\n  const handleReceiveMessage = (data) => {\n    const isMessageAlreadyExists = message.data.some((item) => item._id === data._id);\n\n    if (!isMessageAlreadyExists) {\n      setMessage((prevState) => {\n        return {\n          data: [...prevState.data, data],\n        };\n      });\n    }\n  };\n\n  socket.on(\"receive_message\", handleReceiveMessage);\n\n  \n  return () => {\n    socket.off(\"receive_message\", handleReceiveMessage);\n  };\n}, [socket]);\n\nuseEffect(()=> {\n  chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;\n})\n\n\n  \n  console.log(\"logged user\",loggedUser)\n  return (\n    <div className='chat-left'>\n      <div className='left-container'>\n        <div className='right-container-navbar'>\n          <div className='nav-container'>\n            <div className='profile'>\n              {\n                myUser.length !== 0 && (\n                  <div className='nav-profile-pic'>\n                    {/* <img src={backendPath + myUser.pic} /> */}\n                    <BinaryImage contentType={myUser.pic.contentType} data={myUser.pic.data.data} />\n                  </div>\n                )\n                \n              }\n              \n              <div className='selected-user-name'>\n              \n                <h3>{myUser.username}</h3>\n              \n              </div>\n              \n            </div>\n            <div className='group-others'>\n              <div className='group-icons'>\n                {/* <GroupsIcon className =\"grpicons\"/> */}\n                {\n                myUser.length !== 0 && (\n                  <MoreVertIcon className='grpicons' onClick={()=> setdropDown(!dropDown)}/>\n                )\n                \n              }\n                \n                    {\n                      dropDown && (\n                        <div className='dropdown'>\n                          <div className='dropBtn' onClick={handleProfile}>\n                            profile\n                          </div>\n                        </div>\n                      )\n                    }\n                \n                \n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className='chat-body' ref={chatBodyRef}>\n          {/* {console.log(message.data)} */}\n        {message.data && message.data.map((item, i) => {\n          const isMyMessage = item.sender._id === userData.other._id;\n          const messageContainerClass = isMyMessage ? 'message right-message' : 'message left-message';\n\n          return (\n            <div className={messageContainerClass} key={i} onClick={() => setIsRemovemessage(false)}>\n              {/* id={username === item.author ?\"you\":\"other\"} */}\n              <div className=\"message-container\" onContextMenu={(e) => handleContextMenu(e, item,i)} >\n                <div className='message-content'>\n                  <p>{item.content}</p>\n                  <div className='message-meta'>\n                    <div className='time'>{item.createdAt.substring(11, 16)}</div>  {/* Assuming you have a createdAt property */}\n                  </div>\n                  {/* {\n                    isRemoveMessage && index === i && item.sender._id === userData.other._id && (\n                      <div className='dropdownRemove'>\n                        <div className='dropBtn' onClick={()=> handleRemoveMsg(item)}>\n                          remove\n                        </div>\n                      </div>\n                    )\n                  }   */}\n                </div>\n               \n              </div>\n            </div>\n            \n          );\n        })}\n        \n      </div>\n      <div className=\"chat-footer\">\n      {\n        myUser.length !== 0 && (\n          <div className='chat-footer-container'>\n            <input type=\"text\" placeholder='Hey...'\n            value={inputMsg}\n            onChange={(event)=> {\n              handleSubmit(event)\n            }}\n            onKeyPress={(event) => {\n              if (event.key === \"Enter\" || event.keyCode === 13) {\n                sendMessage()\n              }\n            }}\n            />\n        </div>  \n        )\n        \n      }\n        \n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MyChat\n","/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapplication/client/src/component/BinaryImage.jsx",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/index.js",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/App.js",["133","134","135","136"],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/reportWebVitals.js",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/pages/Authentication.jsx",["137","138","139"],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/pages/Home.jsx",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/login/Login.jsx",["140"],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/register/Register.jsx",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/chatpage/ChatPage.jsx",["141","142"],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/BinaryImage.jsx",[],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/mychat/MyChat.jsx",["143","144","145","146","147","148","149","150"],[],"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/groupChat/GrpChat.jsx",["151","152","153","154","155","156","157","158"],[],{"ruleId":"159","severity":1,"message":"160","line":5,"column":3,"nodeType":"161","messageId":"162","endLine":5,"endColumn":11},{"ruleId":"159","severity":1,"message":"163","line":10,"column":8,"nodeType":"161","messageId":"162","endLine":10,"endColumn":13},{"ruleId":"159","severity":1,"message":"164","line":21,"column":23,"nodeType":"161","messageId":"162","endLine":21,"endColumn":37},{"ruleId":"165","severity":1,"message":"166","line":57,"column":6,"nodeType":"167","endLine":57,"endColumn":8,"suggestions":"168"},{"ruleId":"159","severity":1,"message":"169","line":1,"column":17,"nodeType":"161","messageId":"162","endLine":1,"endColumn":25},{"ruleId":"159","severity":1,"message":"170","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":16},{"ruleId":"159","severity":1,"message":"163","line":3,"column":8,"nodeType":"161","messageId":"162","endLine":3,"endColumn":13},{"ruleId":"159","severity":1,"message":"171","line":8,"column":9,"nodeType":"161","messageId":"162","endLine":8,"endColumn":17},{"ruleId":"165","severity":1,"message":"172","line":148,"column":6,"nodeType":"167","endLine":148,"endColumn":20,"suggestions":"173"},{"ruleId":"165","severity":1,"message":"174","line":152,"column":6,"nodeType":"167","endLine":152,"endColumn":14,"suggestions":"175"},{"ruleId":"165","severity":1,"message":"176","line":220,"column":6,"nodeType":"167","endLine":220,"endColumn":58,"suggestions":"177"},{"ruleId":"159","severity":1,"message":"178","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":18},{"ruleId":"159","severity":1,"message":"179","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":27},{"ruleId":"159","severity":1,"message":"180","line":17,"column":10,"nodeType":"161","messageId":"162","endLine":17,"endColumn":25},{"ruleId":"159","severity":1,"message":"181","line":18,"column":10,"nodeType":"161","messageId":"162","endLine":18,"endColumn":15},{"ruleId":"159","severity":1,"message":"182","line":22,"column":7,"nodeType":"161","messageId":"162","endLine":22,"endColumn":26},{"ruleId":"165","severity":1,"message":"183","line":122,"column":3,"nodeType":"167","endLine":122,"endColumn":17,"suggestions":"184"},{"ruleId":"165","severity":1,"message":"185","line":146,"column":25,"nodeType":"161","endLine":146,"endColumn":37},{"ruleId":"165","severity":1,"message":"186","line":168,"column":4,"nodeType":"167","endLine":168,"endColumn":12,"suggestions":"187"},{"ruleId":"159","severity":1,"message":"160","line":5,"column":3,"nodeType":"161","messageId":"162","endLine":5,"endColumn":11},{"ruleId":"159","severity":1,"message":"163","line":10,"column":8,"nodeType":"161","messageId":"162","endLine":10,"endColumn":13},{"ruleId":"159","severity":1,"message":"164","line":21,"column":23,"nodeType":"161","messageId":"162","endLine":21,"endColumn":37},{"ruleId":"165","severity":1,"message":"166","line":57,"column":6,"nodeType":"167","endLine":57,"endColumn":8,"suggestions":"188"},{"ruleId":"159","severity":1,"message":"169","line":1,"column":17,"nodeType":"161","messageId":"162","endLine":1,"endColumn":25},{"ruleId":"159","severity":1,"message":"170","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":16},{"ruleId":"159","severity":1,"message":"163","line":3,"column":8,"nodeType":"161","messageId":"162","endLine":3,"endColumn":13},{"ruleId":"159","severity":1,"message":"171","line":8,"column":9,"nodeType":"161","messageId":"162","endLine":8,"endColumn":17},{"ruleId":"165","severity":1,"message":"174","line":180,"column":6,"nodeType":"167","endLine":180,"endColumn":14,"suggestions":"189"},{"ruleId":"165","severity":1,"message":"190","line":274,"column":6,"nodeType":"167","endLine":274,"endColumn":58,"suggestions":"191"},{"ruleId":"159","severity":1,"message":"178","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":18},{"ruleId":"159","severity":1,"message":"179","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":27},{"ruleId":"159","severity":1,"message":"180","line":18,"column":10,"nodeType":"161","messageId":"162","endLine":18,"endColumn":25},{"ruleId":"159","severity":1,"message":"181","line":19,"column":10,"nodeType":"161","messageId":"162","endLine":19,"endColumn":15},{"ruleId":"159","severity":1,"message":"182","line":23,"column":7,"nodeType":"161","messageId":"162","endLine":23,"endColumn":26},{"ruleId":"165","severity":1,"message":"183","line":123,"column":3,"nodeType":"167","endLine":123,"endColumn":17,"suggestions":"192"},{"ruleId":"165","severity":1,"message":"185","line":147,"column":25,"nodeType":"161","endLine":147,"endColumn":37},{"ruleId":"165","severity":1,"message":"186","line":169,"column":4,"nodeType":"167","endLine":169,"endColumn":12,"suggestions":"193"},{"ruleId":"159","severity":1,"message":"178","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":18},{"ruleId":"159","severity":1,"message":"179","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":27},{"ruleId":"159","severity":1,"message":"194","line":11,"column":10,"nodeType":"161","messageId":"162","endLine":11,"endColumn":20},{"ruleId":"159","severity":1,"message":"180","line":16,"column":10,"nodeType":"161","messageId":"162","endLine":16,"endColumn":25},{"ruleId":"159","severity":1,"message":"181","line":17,"column":10,"nodeType":"161","messageId":"162","endLine":17,"endColumn":15},{"ruleId":"159","severity":1,"message":"195","line":17,"column":17,"nodeType":"161","messageId":"162","endLine":17,"endColumn":25},{"ruleId":"165","severity":1,"message":"183","line":89,"column":3,"nodeType":"167","endLine":89,"endColumn":17,"suggestions":"196"},{"ruleId":"165","severity":1,"message":"197","line":135,"column":3,"nodeType":"167","endLine":135,"endColumn":15,"suggestions":"198"},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'Login' is defined but never used.","'setBackendPath' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoggedIn'. Either include it or remove the dependency array.","ArrayExpression",["199"],"'useState' is defined but never used.","'Register' is defined but never used.","'navigate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'otherUser'. Either include it or remove the dependency array.",["200"],"React Hook useEffect has a missing dependency: 'handleUsers'. Either include it or remove the dependency array.",["201"],"React Hook useEffect has a missing dependency: 'userData.other._id'. Either include it or remove the dependency array.",["202"],"'GroupsIcon' is defined but never used.","'ArrowForwardIosIcon' is defined but never used.","'isRemoveMessage' is assigned a value but never used.","'index' is assigned a value but never used.","'selectedChatCompare' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["203"],"Assignments to the 'selectedChatCompare' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has a missing dependency: 'message.data'. Either include it or remove the dependency array.",["204"],["205"],["206"],"React Hook useEffect has missing dependencies: 'fetchChats' and 'userData.other._id'. Either include them or remove the dependency array.",["207"],["208"],["209"],"'loggedUser' is assigned a value but never used.","'setIndex' is assigned a value but never used.",["210"],"React Hook useEffect has missing dependencies: 'message.data' and 'socket'. Either include them or remove the dependency array.",["211"],{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"212","fix":"224"},{"desc":"216","fix":"225"},{"desc":"226","fix":"227"},{"desc":"220","fix":"228"},{"desc":"222","fix":"229"},{"desc":"220","fix":"230"},{"desc":"231","fix":"232"},"Update the dependencies array to be: [isLoggedIn]",{"range":"233","text":"234"},"Update the dependencies array to be: [otherUser, selectedChat]",{"range":"235","text":"236"},"Update the dependencies array to be: [handleUsers, search]",{"range":"237","text":"238"},"Update the dependencies array to be: [search, userData.accessToken, setWithoutSearchRslt, userData.other._id]",{"range":"239","text":"240"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"241","text":"242"},"Update the dependencies array to be: [message.data, socket]",{"range":"243","text":"244"},{"range":"245","text":"234"},{"range":"246","text":"238"},"Update the dependencies array to be: [search, userData.accessToken, setWithoutSearchRslt, userData.other._id, fetchChats]",{"range":"247","text":"248"},{"range":"249","text":"242"},{"range":"250","text":"244"},{"range":"251","text":"242"},"Update the dependencies array to be: [message.data, seeChanges, socket]",{"range":"252","text":"253"},[1868,1870],"[isLoggedIn]",[4645,4659],"[otherUser, selectedChat]",[4707,4715],"[handleUsers, search]",[6756,6808],"[search, userData.accessToken, setWithoutSearchRslt, userData.other._id]",[2991,3005],"[fetchMessages, selectedChat]",[3996,4004],"[message.data, socket]",[1868,1870],[6257,6265],[9316,9368],"[search, userData.accessToken, setWithoutSearchRslt, userData.other._id, fetchChats]",[2986,3000],[3991,3999],[2302,2316],[3379,3391],"[message.data, seeChanges, socket]"]