{"ast":null,"code":"var _jsxFileName = \"/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/groupChat/GrpChat.jsx\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport '../mychat/mychat.css';\nimport axios from 'axios';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport BinaryImage from '../BinaryImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrpChat = (socket, userData, selectedChat, user, handleProfile) => {\n  console.log(socket, userData, user, selectedChat);\n  //   const [loggedUser, setLoggedUser] = useState([])\n  //   const [inputMsg, setInputMsg] = useState(\"\")\n  //   const [message, setMessage] = useState({ data: [] });\n  //   const [dropDown, setdropDown] = useState(false)\n\n  //   const [isRemoveMessage, setIsRemovemessage] = useState(false)\n  //   const [index, setIndex] = useState(0)\n  //   const chatBodyRef = useRef();\n\n  //   let myUser = selectedChat\n\n  //   console.log(\"this is my myUser:\",myUser)\n  //   const handleSubmit = (event) =>{\n  //     setInputMsg(event.target.value)\n  //     console.log(\"handleSubmt\",message)\n\n  //   }\n\n  //  const fetchMessages = async() => {\n  //   try {\n  //     const config ={\n  //       headers: {\n  //         Authorization:`Bearer ${userData.accessToken}`\n  //       }\n  //     }\n\n  //     const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/message/${selectedChat._id}`, config);\n  //     const responseData = response.data;\n\n  //     // console.log(\"this is the message I want\", responseData);\n\n  //     setMessage({ data: responseData });\n  //     // console.log(\"responseData:\",responseData)\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n\n  // const sendMessage = async () => {\n  //   try {\n  //     const config = {\n  //       headers: {\n  //         \"Content-Type\":\"application/json\",\n  //         Authorization:`Bearer ${userData.accessToken}`\n  //       }\n  //     }\n  //     setInputMsg(\"\")\n  //     const {data} = await axios.post(\n  //       `${process.env.REACT_APP_API_BASE_URL}/message`,\n  //       {\n  //         content:inputMsg,\n  //         chatId: selectedChat._id,\n  //       },\n  //       config\n  //     )\n\n  //     // console.log(\"this is msg\",data)\n\n  //   await socket.emit(\"new_message\",data)\n  //   setMessage((prevState) => {\n  //     return {\n  //       data: [...prevState.data, data],\n  //     };\n  //   });\n\n  //   }catch(err) {\n\n  //   }\n  // }\n\n  // useEffect(()=> {\n  //   fetchMessages()\n  //   // console.log(\"useEffect set message\",message)\n\n  // },[selectedChat])\n\n  // useEffect(() => {\n  //   const chatBody = document.getElementById('chat-body');\n  //   if (chatBody) {\n  //     chatBody.scrollTop = chatBody.scrollHeight;\n  //   }\n  // }, [message.data]);\n\n  // // useEffect(() => {\n  // //  handleRemoveMsg()\n  // // });\n\n  // useEffect(()=> {\n  //   const storedUserData = localStorage.getItem('userData');\n  //   if (storedUserData) {\n  //     // console.log(\"hi\",storedUserData)\n  //     // console.log(\"hello\",JSON.parse(storedUserData))\n  //     setLoggedUser(JSON.parse(storedUserData));\n  //   }\n  //   // fetchChats()\n  //   // selectedChatCompare = selectedChat\n  // },[selectedChat])\n\n  // useEffect(() => {\n  //   const handleReceiveMessage = (data) => {\n  //     const isMessageAlreadyExists = message.data.some((item) => item._id === data._id);\n\n  //     if (!isMessageAlreadyExists) {\n  //       setMessage((prevState) => {\n  //         return {\n  //           data: [...prevState.data, data],\n  //         };\n  //       });\n  //     }\n  //   };\n\n  //   socket.on(\"receive_message\", handleReceiveMessage);\n\n  //   return () => {\n  //     socket.off(\"receive_message\", handleReceiveMessage);\n  //   };\n  // }, [socket]);\n\n  // useEffect(()=> {\n  //   chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;\n  // })\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   {console.log(\"this is handle grpchat\",socket,userData,selectedChat,user,handleProfile)}\n    // </div>\n    // <div className='chat-left'>\n    //   <div className='left-container'>\n    //     <div className='right-container-navbar'>\n    //       <div className='nav-container'>\n    //         <div className='profile'>\n    //           {\n    //             myUser && myUser.length !== 0 && (\n    //               <div className='nav-profile-pic'>\n    //                 <img src=\"https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=\" alt=\"\" />\n    //                 {/* <BinaryImage contentType={myUser.pic.contentType} data={myUser.pic.data.data} /> */}\n    //               </div>\n    //             )\n    //           }\n    //           <div className='selected-user-name'>\n    //             {/* <h3>{myUser.chatName? myUser:`Group`}</h3> */}\n    //             <h3>group</h3>\n    //           </div>\n    //         </div>\n    //         <div className='group-others'>\n    //           <div className='group-icons'>\n    //             {/* <GroupsIcon className =\"grpicons\"/> */}\n    //             {\n    //             myUser && myUser.length !== 0 && (\n    //               <MoreVertIcon className='grpicons' onClick={()=> setdropDown(!dropDown)}/>\n    //             )\n    //           }\n    //                 {\n    //                   dropDown && (\n    //                     <div className='dropdown'>\n    //                       <div className='dropBtn' onClick={handleProfile}>\n    //                         profile\n    //                       </div>\n    //                     </div>\n    //                   )\n    //                 }\n    //           </div>\n    //         </div>\n    //       </div>\n    //     </div>\n    //     <div className='chat-body' ref={chatBodyRef}>\n    //       {/* {console.log(message.data)} */}\n    //     {message.data && message.data.map((item, i) => {\n    //       const isMyMessage = item.sender._id === userData.other._id;\n    //       const messageContainerClass = isMyMessage ? 'message right-message' : 'message left-message';\n    //       return (\n    //         <div className={messageContainerClass} key={i} onClick={() => setIsRemovemessage(false)}>\n    //           {/* id={username === item.author ?\"you\":\"other\"} */}\n    //           <div className=\"message-container\"  >\n    //             <div className='message-content'>\n    //               <p>{item.content}</p>\n    //               <div className='message-meta'>\n    //                 <div className='time'>{item.createdAt.substring(11, 16)}</div>  {/* Assuming you have a createdAt property */}\n    //               </div>\n    //               {/* {\n    //                 isRemoveMessage && index === i && item.sender._id === userData.other._id && (\n    //                   <div className='dropdownRemove'>\n    //                     <div className='dropBtn' onClick={()=> handleRemoveMsg(item)}>\n    //                       remove\n    //                     </div>\n    //                   </div>\n    //                 )\n    //               }   */}\n    //             </div>\n    //           </div>\n    //         </div>\n    //       );\n    //     })}\n    //   </div>\n    //   <div className=\"chat-footer\">\n    //   {\n    //     myUser && myUser.length !== 0 && (\n    //       <div className='chat-footer-container'>\n    //         <input type=\"text\" placeholder='Hey...'\n    //         value={inputMsg}\n    //         onChange={(event)=> {\n    //           handleSubmit(event)\n    //         }}\n    //         onKeyPress={(event) => {\n    //           if (event.key === \"Enter\" || event.keyCode === 13) {\n    //             sendMessage()\n    //           }\n    //         }}\n    //         />\n    //     </div>  \n    //     )\n    //   }\n    //   </div>\n    //   </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = GrpChat;\nexport default GrpChat;\nvar _c;\n$RefreshReg$(_c, \"GrpChat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","GroupsIcon","axios","ArrowForwardIosIcon","MoreVertIcon","BinaryImage","jsxDEV","_jsxDEV","GrpChat","socket","userData","selectedChat","user","handleProfile","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/media/deeporian/36466FC6466F8609/libraryFolder/library-master/chatapp/chatapplication-master/client/src/component/groupChat/GrpChat.jsx"],"sourcesContent":["import React, { useEffect, useState,useRef } from 'react'\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport '../mychat/mychat.css';\nimport axios from 'axios';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport BinaryImage from '../BinaryImage';\n\nconst GrpChat = (socket, userData, selectedChat, user, handleProfile) => {\n  console.log(socket,userData,user,selectedChat)\n//   const [loggedUser, setLoggedUser] = useState([])\n//   const [inputMsg, setInputMsg] = useState(\"\")\n//   const [message, setMessage] = useState({ data: [] });\n//   const [dropDown, setdropDown] = useState(false)\n  \n//   const [isRemoveMessage, setIsRemovemessage] = useState(false)\n//   const [index, setIndex] = useState(0)\n//   const chatBodyRef = useRef();\n\n//   let myUser = selectedChat\n\n//   console.log(\"this is my myUser:\",myUser)\n//   const handleSubmit = (event) =>{\n//     setInputMsg(event.target.value)\n//     console.log(\"handleSubmt\",message)\n  \n//   }\n\n\n//  const fetchMessages = async() => {\n//   try {\n//     const config ={\n//       headers: {\n//         Authorization:`Bearer ${userData.accessToken}`\n//       }\n//     }\n\n//     const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/message/${selectedChat._id}`, config);\n//     const responseData = response.data;\n\n//     // console.log(\"this is the message I want\", responseData);\n\n//     setMessage({ data: responseData });\n//     // console.log(\"responseData:\",responseData)\n//   } catch (err) {\n//     console.log(err);\n//   }\n// }\n\n// const sendMessage = async () => {\n//   try {\n//     const config = {\n//       headers: {\n//         \"Content-Type\":\"application/json\",\n//         Authorization:`Bearer ${userData.accessToken}`\n//       }\n//     }\n//     setInputMsg(\"\")\n//     const {data} = await axios.post(\n//       `${process.env.REACT_APP_API_BASE_URL}/message`,\n//       {\n//         content:inputMsg,\n//         chatId: selectedChat._id,\n//       },\n//       config\n//     )\n\n//     // console.log(\"this is msg\",data)\n    \n\n  \n//   await socket.emit(\"new_message\",data)\n//   setMessage((prevState) => {\n//     return {\n//       data: [...prevState.data, data],\n//     };\n//   });\n  \n//   }catch(err) {\n    \n//   }\n// }\n  \n// useEffect(()=> {\n//   fetchMessages()\n//   // console.log(\"useEffect set message\",message)\n  \n// },[selectedChat])\n\n// useEffect(() => {\n//   const chatBody = document.getElementById('chat-body');\n//   if (chatBody) {\n//     chatBody.scrollTop = chatBody.scrollHeight;\n//   }\n// }, [message.data]);\n\n\n// // useEffect(() => {\n// //  handleRemoveMsg()\n// // });\n\n\n\n// useEffect(()=> {\n//   const storedUserData = localStorage.getItem('userData');\n//   if (storedUserData) {\n//     // console.log(\"hi\",storedUserData)\n//     // console.log(\"hello\",JSON.parse(storedUserData))\n//     setLoggedUser(JSON.parse(storedUserData));\n//   }\n//   // fetchChats()\n//   // selectedChatCompare = selectedChat\n// },[selectedChat])\n\n// useEffect(() => {\n//   const handleReceiveMessage = (data) => {\n//     const isMessageAlreadyExists = message.data.some((item) => item._id === data._id);\n\n//     if (!isMessageAlreadyExists) {\n//       setMessage((prevState) => {\n//         return {\n//           data: [...prevState.data, data],\n//         };\n//       });\n//     }\n//   };\n\n//   socket.on(\"receive_message\", handleReceiveMessage);\n\n  \n//   return () => {\n//     socket.off(\"receive_message\", handleReceiveMessage);\n//   };\n// }, [socket]);\n\n// useEffect(()=> {\n//   chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;\n// })\n  return (\n    // <div>\n    //   {console.log(\"this is handle grpchat\",socket,userData,selectedChat,user,handleProfile)}\n    // </div>\n\n    // <div className='chat-left'>\n    //   <div className='left-container'>\n    //     <div className='right-container-navbar'>\n    //       <div className='nav-container'>\n    //         <div className='profile'>\n    //           {\n    //             myUser && myUser.length !== 0 && (\n    //               <div className='nav-profile-pic'>\n    //                 <img src=\"https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=\" alt=\"\" />\n                    \n    //                 {/* <BinaryImage contentType={myUser.pic.contentType} data={myUser.pic.data.data} /> */}\n    //               </div>\n    //             )\n                \n    //           }\n              \n    //           <div className='selected-user-name'>\n              \n    //             {/* <h3>{myUser.chatName? myUser:`Group`}</h3> */}\n    //             <h3>group</h3>\n    //           </div>\n              \n    //         </div>\n    //         <div className='group-others'>\n    //           <div className='group-icons'>\n    //             {/* <GroupsIcon className =\"grpicons\"/> */}\n    //             {\n    //             myUser && myUser.length !== 0 && (\n    //               <MoreVertIcon className='grpicons' onClick={()=> setdropDown(!dropDown)}/>\n    //             )\n                \n    //           }\n                \n    //                 {\n    //                   dropDown && (\n    //                     <div className='dropdown'>\n    //                       <div className='dropBtn' onClick={handleProfile}>\n    //                         profile\n    //                       </div>\n    //                     </div>\n    //                   )\n    //                 }\n                \n                \n    //           </div>\n    //         </div>\n    //       </div>\n    //     </div>\n        \n    //     <div className='chat-body' ref={chatBodyRef}>\n    //       {/* {console.log(message.data)} */}\n    //     {message.data && message.data.map((item, i) => {\n    //       const isMyMessage = item.sender._id === userData.other._id;\n    //       const messageContainerClass = isMyMessage ? 'message right-message' : 'message left-message';\n\n    //       return (\n    //         <div className={messageContainerClass} key={i} onClick={() => setIsRemovemessage(false)}>\n    //           {/* id={username === item.author ?\"you\":\"other\"} */}\n    //           <div className=\"message-container\"  >\n    //             <div className='message-content'>\n    //               <p>{item.content}</p>\n    //               <div className='message-meta'>\n    //                 <div className='time'>{item.createdAt.substring(11, 16)}</div>  {/* Assuming you have a createdAt property */}\n    //               </div>\n    //               {/* {\n    //                 isRemoveMessage && index === i && item.sender._id === userData.other._id && (\n    //                   <div className='dropdownRemove'>\n    //                     <div className='dropBtn' onClick={()=> handleRemoveMsg(item)}>\n    //                       remove\n    //                     </div>\n    //                   </div>\n    //                 )\n    //               }   */}\n    //             </div>\n               \n    //           </div>\n    //         </div>\n            \n    //       );\n    //     })}\n        \n    //   </div>\n    //   <div className=\"chat-footer\">\n    //   {\n    //     myUser && myUser.length !== 0 && (\n    //       <div className='chat-footer-container'>\n    //         <input type=\"text\" placeholder='Hey...'\n    //         value={inputMsg}\n    //         onChange={(event)=> {\n    //           handleSubmit(event)\n    //         }}\n    //         onKeyPress={(event) => {\n    //           if (event.key === \"Enter\" || event.keyCode === 13) {\n    //             sendMessage()\n    //           }\n    //         }}\n    //         />\n    //     </div>  \n    //     )\n        \n    //   }\n        \n    //   </div>\n    //   </div>\n    // </div>\n    <div>hello</div>\n  )\n  \n}\n\nexport default GrpChat\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAACC,MAAM,QAAQ,OAAO;AACzD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAO,sBAAsB;AAC7B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,mBAAmB,MAAM,qCAAqC;AACrE,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,WAAW,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,OAAO,GAAGA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,IAAI,EAAEC,aAAa,KAAK;EACvEC,OAAO,CAACC,GAAG,CAACN,MAAM,EAACC,QAAQ,EAACE,IAAI,EAACD,YAAY,CAAC;EAChD;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAIA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAGA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACE;IAAA;IACE;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IAEA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACAJ,OAAA;MAAAS,QAAA,EAAK;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;AAGpB,CAAC;AAAAC,EAAA,GAnPKb,OAAO;AAqPb,eAAeA,OAAO;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}